@page "/scrapeCecilCounty"
@using DataLibrary.Models
@using DataLibrary.Services.SDATScrapers
@using DotNet.Testcontainers.Builders;
@using DotNet.Testcontainers.Containers;
@using OpenQA.Selenium.Firefox;
@using OpenQA.Selenium.Remote;
@using OpenQA.Selenium.Support.UI;
@using OpenQA.Selenium;
@inject CecilCountyScraper cecilCountyScraper

<div class="row mb-3 mt-3">
    <div class="container">
        <div>
            <EditForm Model="@AmountToScrape">
                <label>Amount</label>
                <InputNumber TValue="int" @bind-Value="@AmountToScrape" DisplayName="Amount">@AmountToScrape</InputNumber>
            </EditForm>
            <button class="btn btn-primary" type="submit" @onclick="() => Scrape(AmountToScrape)">Scrape</button>
            <button class="btn btn-danger" type="submit" @onclick="() => Stop()">Stop</button>
        </div>
    </div>
</div>

@code {
    RemoteWebDriver RemoteWebDriver;
    WebDriverWait WebDriverWait;
    private List<AddressModel> AddressModel = new();
    private int AmountToScrape { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await SpinUp();
    }

    private async Task SpinUp()
    {
        var gridNetwork = new TestcontainersNetworkBuilder()
            .WithName("seleniumgridnetwork")
            .Build();

        var seleniumHubTestContainer = new TestcontainersBuilder<TestcontainersContainer>()
            .WithImage("selenium/node-firefox:4.7.1-20221208")
            .WithName("selenium-hub")
            .WithPortBinding(4442, 4442)
            .WithPortBinding(4443, 4443)
            .WithPortBinding(4444, 4444)
            .WithNetwork(gridNetwork)
            .WithWaitStrategy(Wait.ForUnixContainer().UntilPortIsAvailable(4444))
            .Build();

        var firefoxEnvironment = new Dictionary<string, string>()
        {
            { "SE_EVENT_BUS_HOST", "selenium-hub" },
            { "SE_EVENT_BUS_PUBLISH_PORT", "4442" },
            { "SE_EVENT_BUS_SUBSCRIBE_PORT", "4443" }
        };

        var firefoxTestContainerBuilder = new TestcontainersBuilder<TestcontainersContainer>()
            .WithImage("selenium/node-firefox:4.7.1-20221208")
            .WithEnvironment(firefoxEnvironment)
            .WithNetwork(gridNetwork)
            .Build();

        var firefoxVideoEnvironment = new Dictionary<string, string>()
        {
            { "DISPLAY_CONTAINER_NAME", "firefox" },
            { "FILE_NAME", "firefox.mp4" }
        };

        var firefoxVideoTestContainer = new TestcontainersBuilder<TestcontainersContainer>()
            .WithImage("selenium/video:ffmpeg-4.3.1-20220726")
            .WithNetwork(gridNetwork)
            .WithEnvironment(firefoxVideoEnvironment)
            .Build();

        await gridNetwork.CreateAsync();
        await seleniumHubTestContainer.StartAsync();
        await firefoxTestContainerBuilder.StartAsync();
        await firefoxVideoTestContainer.StartAsync();

        var firefoxOptions = new FirefoxOptions();
        firefoxOptions.AddArguments("--headless");
        RemoteWebDriver = new RemoteWebDriver(new Uri("http://localhost:4444/"), firefoxOptions);

        WebDriverWait = new(RemoteWebDriver, TimeSpan.FromSeconds(10));
        WebDriverWait.IgnoreExceptionTypes(
            typeof(NoSuchElementException),
            typeof(StaleElementReferenceException),
            typeof(ElementNotSelectableException),
            typeof(ElementNotVisibleException));
    }

    private async Task Scrape(int amountToScrape)
    {
        await cecilCountyScraper.Scrape(RemoteWebDriver, WebDriverWait, AddressModel, AmountToScrape);
    }
    private void Stop()
    {
        RemoteWebDriver.Quit();
    }
}
