@page "/extract"
@using System.IO
@using AutoMapper;
@using DataLibrary.DbAccess
@using DataLibrary.DbServices
@using DataLibrary.Dtos;
@using DataLibrary.Models
@using DataLibrary.Services
@using Microsoft.AspNetCore.Http
@using System.Globalization
@using System.Text.Json
@using System.IO.Compression;
@inject IDataContext dataContext
@inject IMapper mapper
@inject ALLEDataServiceFactory alleDataServiceFactory
@inject ANNEDataServiceFactory anneDataServiceFactory
@inject BACIDataServiceFactory baciDataServiceFactory
@inject BACODataServiceFactory bacoDataServiceFactory
@inject CALVDataServiceFactory calvDataServiceFactory
@inject CARODataServiceFactory caroDataServiceFactory
@inject CARRDataServiceFactory carrDataServiceFactory
@inject CECIDataServiceFactory ceciDataServiceFactory
@inject CHARDataServiceFactory charDataServiceFactory
@inject DORCDataServiceFactory dorcDataServiceFactory
@inject FREDDataServiceFactory fredDataServiceFactory
@inject GARRDataServiceFactory garrDataServiceFactory
@inject HARFDataServiceFactory harfDataServiceFactory
@inject HOWADataServiceFactory howaDataServiceFactory
@inject KENTDataServiceFactory kentDataServiceFactory
@inject MONTDataServiceFactory montDataServiceFactory
@inject PRINDataServiceFactory prinDataServiceFactory
@inject QUEEDataServiceFactory queeDataServiceFactory
@inject SOMEDataServiceFactory someDataServiceFactory
@inject STMADataServiceFactory stmaDataServiceFactory
@inject TALBDataServiceFactory talbDataServiceFactory
@inject WASHDataServiceFactory washDataServiceFactory
@inject WICODataServiceFactory wicoDataServiceFactory
@inject WORCDataServiceFactory worcDataServiceFactory

<div class="row mb-3 mt-3">
    <div class="container">
        <div>
            <InputFile OnChange="OnInputFileChange"></InputFile>
            <button class="btn btn-primary" type="submit" @onclick="UploadToLocal">UploadToLocal</button>
        </div>
        <div>
            <button class="btn btn-secondary" type="submit" @onclick="ExtractALLE">Extract ALLE</button>
            <button class="btn btn-secondary" type="submit" @onclick="ExtractANNE">Extract ANNE</button>
            <button class="btn btn-secondary" type="submit" @onclick="ExtractBACI">Extract BACI</button>
            <button class="btn btn-secondary" type="submit" @onclick="ExtractBACO">Extract BACO</button>
            <button class="btn btn-secondary" type="submit" @onclick="ExtractCALV">Extract CALV</button>
            <button class="btn btn-secondary" type="submit" @onclick="ExtractCARO">Extract CARO</button>
            <button class="btn btn-secondary" type="submit" @onclick="ExtractCARR">Extract CARR</button>
            <button class="btn btn-secondary" type="submit" @onclick="ExtractCECI">Extract CECI</button>
            <button class="btn btn-secondary" type="submit" @onclick="ExtractCHAR">Extract CHAR</button>
            <button class="btn btn-secondary" type="submit" @onclick="ExtractDORC">Extract DORC</button>
            <button class="btn btn-secondary" type="submit" @onclick="ExtractFRED">Extract FRED</button>
            <button class="btn btn-secondary" type="submit" @onclick="ExtractGARR">Extract GARR</button>
            <button class="btn btn-secondary" type="submit" @onclick="ExtractHARF">Extract HARF</button>
            <button class="btn btn-secondary" type="submit" @onclick="ExtractHOWA">Extract HOWA</button>
            <button class="btn btn-secondary" type="submit" @onclick="ExtractKENT">Extract KENT</button>
            <button class="btn btn-secondary" type="submit" @onclick="ExtractMONT">Extract MONT</button>
            <button class="btn btn-secondary" type="submit" @onclick="ExtractPRIN">Extract PRIN</button>
            <button class="btn btn-secondary" type="submit" @onclick="ExtractQUEE">Extract QUEE</button>
            <button class="btn btn-secondary" type="submit" @onclick="ExtractSOME">Extract SOME</button>
            <button class="btn btn-secondary" type="submit" @onclick="ExtractSTMA">Extract STMA</button>
            <button class="btn btn-secondary" type="submit" @onclick="ExtractTALB">Extract TALB</button>
            <button class="btn btn-secondary" type="submit" @onclick="ExtractWASH">Extract WASH</button>
            <button class="btn btn-secondary" type="submit" @onclick="ExtractWICO">Extract WICO</button>
            <button class="btn btn-secondary" type="submit" @onclick="ExtractWORC">Extract WORC</button>
        </div>
        @if(selectedFiles is not null)
        {
            <div class="row mb-3 mt-3">
                @foreach (var file in Files)
                {
                    <div class="table-striped">
                        <p>@file.File.Name</p>
                        <p>@file.File.ContentType</p>
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    private IReadOnlyList<IBrowserFile>? selectedFiles;
    private List<FileModel> Files = new();
    private string Message = "No file(s) selected";
    private long maxAllowedBufferSize = 1024 * 1024 * 500;
    private int count = 0;

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        if (Files.Count > 0)
        {
            Files = new();
        }
        selectedFiles = e.GetMultipleFiles();
        foreach (var selectedFile in selectedFiles)
        {
            FileModel file = new();
            file.File = selectedFile;
            Files.Add(file);
        }
        Message = $"{Files.Count} file(s) selected";
        this.StateHasChanged();
    }
    private async void UploadToLocal()
    {
        foreach (var file in Files)
        {
            Stream stream = file.File.OpenReadStream(maxAllowedBufferSize);
            file.UploadPath = Directory.GetCurrentDirectory() + @"\wwwroot\data\" + "uploadId_" + Guid.NewGuid().ToString() + "_" + file.File.Name;
            FileStream fileStream = File.Create(file.UploadPath);
            await stream.CopyToAsync(fileStream);
            fileStream.Close();
            fileStream.Dispose();
            stream.Close();
            stream.Dispose();
            Console.WriteLine($"{file.File.Name} upload complete.");
        }
        Message = $"{Files.Count} file(s) uploaded on server";
        this.StateHasChanged();
    }
    private async Task ExtractJsonFile(IGroundRentProcessorDataServiceFactory groundRentProcessorDataServiceFactory, string county)
    {
        foreach (var file in Files)
        {
            count = 0;
            using (FileStream fileStream = new FileStream(file.UploadPath, FileMode.Open, FileAccess.Read))
            {
                var addressDto = JsonSerializer.Deserialize<AddressDto[]>(fileStream);
                using (var uow = dataContext.CreateUnitOfWork())
                {
                    foreach (var dto in addressDto)
                    {
                        var addressModel = mapper.Map<AddressModel>(dto);
                        var noSpacesAccountNumber = addressModel.AccountNumber.Replace(" ", "");
                        var dataService = groundRentProcessorDataServiceFactory.CreateGroundRentProcessorDataService(uow);
                        await dataService.CreateAddress(new AddressModel()
                            {
                                AccountId = addressModel.AccountId,
                                County = county,
                                AccountNumber = noSpacesAccountNumber,
                                Ward = addressModel.Ward,
                                Section = addressModel.Section,
                                Block = addressModel.Block,
                                Lot = addressModel.Lot,
                                LandUseCode = addressModel.LandUseCode,
                                YearBuilt = addressModel.YearBuilt,
                                IsGroundRent = addressModel.IsGroundRent,
                                IsRedeemed = addressModel.IsRedeemed,
                                PdfCount = addressModel.PdfCount,
                                AllDataDownloaded = addressModel.AllDataDownloaded
                            });
                        count++;
                    }
                }
            }
            File.Delete(file.UploadPath);
            Console.WriteLine($"Processing complete. {county} address count: {count}.");
        }
    }
    private async void ExtractALLE() => await ExtractJsonFile(alleDataServiceFactory, "ALLE");
    private async void ExtractANNE() => await ExtractJsonFile(anneDataServiceFactory, "ANNE");
    private async void ExtractBACI() => await ExtractJsonFile(baciDataServiceFactory, "BACI");
    private async void ExtractBACO() => await ExtractJsonFile(bacoDataServiceFactory, "BACO");
    private async void ExtractCALV() => await ExtractJsonFile(calvDataServiceFactory, "CALV");
    private async void ExtractCARO() => await ExtractJsonFile(caroDataServiceFactory, "CARO");
    private async void ExtractCARR() => await ExtractJsonFile(carrDataServiceFactory, "CARR");
    private async void ExtractCECI() => await ExtractJsonFile(ceciDataServiceFactory, "CECI");
    private async void ExtractCHAR() => await ExtractJsonFile(charDataServiceFactory, "CHAR");
    private async void ExtractDORC() => await ExtractJsonFile(dorcDataServiceFactory, "DORC");
    private async void ExtractFRED() => await ExtractJsonFile(fredDataServiceFactory, "FRED");
    private async void ExtractGARR() => await ExtractJsonFile(garrDataServiceFactory, "GARR");
    private async void ExtractHARF() => await ExtractJsonFile(harfDataServiceFactory, "HARF");
    private async void ExtractHOWA() => await ExtractJsonFile(howaDataServiceFactory, "HOWA");
    private async void ExtractKENT() => await ExtractJsonFile(kentDataServiceFactory, "KENT");
    private async void ExtractMONT() => await ExtractJsonFile(montDataServiceFactory, "MONT");
    private async void ExtractPRIN() => await ExtractJsonFile(prinDataServiceFactory, "PRIN");
    private async void ExtractQUEE() => await ExtractJsonFile(queeDataServiceFactory, "QUEE");
    private async void ExtractSOME() => await ExtractJsonFile(someDataServiceFactory, "SOME");
    private async void ExtractSTMA() => await ExtractJsonFile(stmaDataServiceFactory, "STMA");
    private async void ExtractTALB() => await ExtractJsonFile(talbDataServiceFactory, "TALB");
    private async void ExtractWASH() => await ExtractJsonFile(washDataServiceFactory, "WASH");
    private async void ExtractWICO() => await ExtractJsonFile(wicoDataServiceFactory, "WICO");
    private async void ExtractWORC() => await ExtractJsonFile(worcDataServiceFactory, "WORC");
}